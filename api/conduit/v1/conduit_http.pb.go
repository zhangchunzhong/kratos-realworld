// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: conduit/v1/conduit.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConduitaddComment = "/conduit.v1.Conduit/addComment"
const OperationConduitAuthenticate = "/conduit.v1.Conduit/Authenticate"
const OperationConduitcreateArticle = "/conduit.v1.Conduit/createArticle"
const OperationConduitdeleteArticle = "/conduit.v1.Conduit/deleteArticle"
const OperationConduitdeleteComment = "/conduit.v1.Conduit/deleteComment"
const OperationConduitfavoriteArticle = "/conduit.v1.Conduit/favoriteArticle"
const OperationConduitfeedArticles = "/conduit.v1.Conduit/feedArticles"
const OperationConduitfollowUser = "/conduit.v1.Conduit/followUser"
const OperationConduitgetArticle = "/conduit.v1.Conduit/getArticle"
const OperationConduitgetComments = "/conduit.v1.Conduit/getComments"
const OperationConduitgetCurrentUser = "/conduit.v1.Conduit/getCurrentUser"
const OperationConduitgetProfile = "/conduit.v1.Conduit/getProfile"
const OperationConduitlistArticles = "/conduit.v1.Conduit/listArticles"
const OperationConduitlistTags = "/conduit.v1.Conduit/listTags"
const OperationConduitRegister = "/conduit.v1.Conduit/Register"
const OperationConduitunfavoriteArticle = "/conduit.v1.Conduit/unfavoriteArticle"
const OperationConduitunfollowUser = "/conduit.v1.Conduit/unfollowUser"
const OperationConduitupdateArticle = "/conduit.v1.Conduit/updateArticle"
const OperationConduitupdateUser = "/conduit.v1.Conduit/updateUser"

type ConduitHTTPServer interface {
	AddComment(context.Context, *AddCommentRequest) (*CommentReply, error)
	Authenticate(context.Context, *AuthenticateRequest) (*UserReply, error)
	CreateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error)
	DeleteArticle(context.Context, *ArticleRequest) (*emptypb.Empty, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	FavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	FeedArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error)
	FollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	GetComments(context.Context, *GetCommentsRequest) (*CommentsReply, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*UserReply, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	ListArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error)
	ListTags(context.Context, *emptypb.Empty) (*TagsReply, error)
	Register(context.Context, *RegisterRequest) (*UserReply, error)
	UnfavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	UnfollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	UpdateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error)
	UpdateUser(context.Context, *UserReply_User) (*UserReply, error)
}

func RegisterConduitHTTPServer(s *http.Server, srv ConduitHTTPServer) {
	r := s.Route("/")
	r.POST("/api/users/login", _Conduit_Authenticate0_HTTP_Handler(srv))
	r.POST("/api/users", _Conduit_Register0_HTTP_Handler(srv))
	r.GET("/api/user", _Conduit_GetCurrentUser0_HTTP_Handler(srv))
	r.PUT("/api/user", _Conduit_UpdateUser0_HTTP_Handler(srv))
	r.GET("/api/profiles/{username}", _Conduit_GetProfile0_HTTP_Handler(srv))
	r.POST("/api/profiles/{username}/follow", _Conduit_FollowUser0_HTTP_Handler(srv))
	r.DELETE("/api/profiles/{username}/follow", _Conduit_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/api/articles", _Conduit_ListArticles0_HTTP_Handler(srv))
	r.GET("/api/articles/feed", _Conduit_FeedArticles0_HTTP_Handler(srv))
	r.GET("/api/articles/{slug}", _Conduit_GetArticle0_HTTP_Handler(srv))
	r.POST("/api/articles", _Conduit_CreateArticle0_HTTP_Handler(srv))
	r.PUT("/api/articles/{slug}", _Conduit_UpdateArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}", _Conduit_DeleteArticle0_HTTP_Handler(srv))
	r.POST("/api/articles/{slug}/comments", _Conduit_AddComment0_HTTP_Handler(srv))
	r.GET("/api/articles/{slug}/comments", _Conduit_GetComments0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}/comments/{id}", _Conduit_DeleteComment0_HTTP_Handler(srv))
	r.POST("/api/articles/{slug}/favorite", _Conduit_FavoriteArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}/favorite", _Conduit_UnfavoriteArticle0_HTTP_Handler(srv))
	r.GET("/api/tags", _Conduit_ListTags0_HTTP_Handler(srv))
}

func _Conduit_Authenticate0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthenticateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitAuthenticate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Authenticate(ctx, req.(*AuthenticateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_Register0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetCurrentUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitgetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentUser(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UpdateUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserReply_User
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitupdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UserReply_User))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetProfile0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitgetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_FollowUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UnfollowUser0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitunfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_ListArticles0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListArticlesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitlistArticles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListArticles(ctx, req.(*ListArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticlesReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_FeedArticles0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListArticlesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitfeedArticles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedArticles(ctx, req.(*ListArticlesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticlesReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitgetArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_CreateArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleReply_Article
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitcreateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticle(ctx, req.(*ArticleReply_Article))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UpdateArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleReply_Article
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitupdateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArticle(ctx, req.(*ArticleReply_Article))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_DeleteArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitdeleteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Conduit_AddComment0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitaddComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddComment(ctx, req.(*AddCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_GetComments0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitgetComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComments(ctx, req.(*GetCommentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentsReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_DeleteComment0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitdeleteComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComment(ctx, req.(*DeleteCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Conduit_FavoriteArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitfavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_UnfavoriteArticle0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitunfavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfavoriteArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Conduit_ListTags0_HTTP_Handler(srv ConduitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConduitlistTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTags(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TagsReply)
		return ctx.Result(200, reply)
	}
}

type ConduitHTTPClient interface {
	AddComment(ctx context.Context, req *AddCommentRequest, opts ...http.CallOption) (rsp *CommentReply, err error)
	Authenticate(ctx context.Context, req *AuthenticateRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	CreateArticle(ctx context.Context, req *ArticleReply_Article, opts ...http.CallOption) (rsp *ArticleReply, err error)
	DeleteArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteComment(ctx context.Context, req *DeleteCommentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FavoriteArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleReply, err error)
	FeedArticles(ctx context.Context, req *ListArticlesRequest, opts ...http.CallOption) (rsp *ArticlesReply, err error)
	FollowUser(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	GetArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleReply, err error)
	GetComments(ctx context.Context, req *GetCommentsRequest, opts ...http.CallOption) (rsp *CommentsReply, err error)
	GetCurrentUser(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *UserReply, err error)
	GetProfile(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	ListArticles(ctx context.Context, req *ListArticlesRequest, opts ...http.CallOption) (rsp *ArticlesReply, err error)
	ListTags(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *TagsReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	UnfavoriteArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleReply, err error)
	UnfollowUser(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	UpdateArticle(ctx context.Context, req *ArticleReply_Article, opts ...http.CallOption) (rsp *ArticleReply, err error)
	UpdateUser(ctx context.Context, req *UserReply_User, opts ...http.CallOption) (rsp *UserReply, err error)
}

type ConduitHTTPClientImpl struct {
	cc *http.Client
}

func NewConduitHTTPClient(client *http.Client) ConduitHTTPClient {
	return &ConduitHTTPClientImpl{client}
}

func (c *ConduitHTTPClientImpl) AddComment(ctx context.Context, in *AddCommentRequest, opts ...http.CallOption) (*CommentReply, error) {
	var out CommentReply
	pattern := "/api/articles/{slug}/comments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitaddComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitAuthenticate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) CreateArticle(ctx context.Context, in *ArticleReply_Article, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitcreateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitdeleteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/articles/{slug}/comments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitdeleteComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) FavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitfavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) FeedArticles(ctx context.Context, in *ListArticlesRequest, opts ...http.CallOption) (*ArticlesReply, error) {
	var out ArticlesReply
	pattern := "/api/articles/feed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitfeedArticles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) FollowUser(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) GetArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitgetArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...http.CallOption) (*CommentsReply, error) {
	var out CommentsReply
	pattern := "/api/articles/{slug}/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitgetComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitgetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) GetProfile(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitgetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...http.CallOption) (*ArticlesReply, error) {
	var out ArticlesReply
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitlistArticles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) ListTags(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*TagsReply, error) {
	var out TagsReply
	pattern := "/api/tags"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitlistTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) UnfavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitunfavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) UnfollowUser(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConduitunfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) UpdateArticle(ctx context.Context, in *ArticleReply_Article, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitupdateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ConduitHTTPClientImpl) UpdateUser(ctx context.Context, in *UserReply_User, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConduitupdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
