// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: conduit/v1/conduit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Conduit_Authenticate_FullMethodName      = "/conduit.v1.Conduit/Authenticate"
	Conduit_Register_FullMethodName          = "/conduit.v1.Conduit/Register"
	Conduit_GetCurrentUser_FullMethodName    = "/conduit.v1.Conduit/getCurrentUser"
	Conduit_UpdateUser_FullMethodName        = "/conduit.v1.Conduit/updateUser"
	Conduit_GetProfile_FullMethodName        = "/conduit.v1.Conduit/getProfile"
	Conduit_FollowUser_FullMethodName        = "/conduit.v1.Conduit/followUser"
	Conduit_UnfollowUser_FullMethodName      = "/conduit.v1.Conduit/unfollowUser"
	Conduit_ListArticles_FullMethodName      = "/conduit.v1.Conduit/listArticles"
	Conduit_FeedArticles_FullMethodName      = "/conduit.v1.Conduit/feedArticles"
	Conduit_GetArticle_FullMethodName        = "/conduit.v1.Conduit/getArticle"
	Conduit_CreateArticle_FullMethodName     = "/conduit.v1.Conduit/createArticle"
	Conduit_UpdateArticle_FullMethodName     = "/conduit.v1.Conduit/updateArticle"
	Conduit_DeleteArticle_FullMethodName     = "/conduit.v1.Conduit/deleteArticle"
	Conduit_AddComment_FullMethodName        = "/conduit.v1.Conduit/addComment"
	Conduit_GetComments_FullMethodName       = "/conduit.v1.Conduit/getComments"
	Conduit_DeleteComment_FullMethodName     = "/conduit.v1.Conduit/deleteComment"
	Conduit_FavoriteArticle_FullMethodName   = "/conduit.v1.Conduit/favoriteArticle"
	Conduit_UnfavoriteArticle_FullMethodName = "/conduit.v1.Conduit/unfavoriteArticle"
	Conduit_ListTags_FullMethodName          = "/conduit.v1.Conduit/listTags"
)

// ConduitClient is the client API for Conduit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConduitClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserReply, error)
	GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserReply, error)
	UpdateUser(ctx context.Context, in *UserReply_User, opts ...grpc.CallOption) (*UserReply, error)
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	FollowUser(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	UnfollowUser(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error)
	FeedArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error)
	GetArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	CreateArticle(ctx context.Context, in *ArticleReply_Article, opts ...grpc.CallOption) (*ArticleReply, error)
	UpdateArticle(ctx context.Context, in *ArticleReply_Article, opts ...grpc.CallOption) (*ArticleReply, error)
	DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*CommentReply, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*CommentsReply, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	UnfavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	ListTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsReply, error)
}

type conduitClient struct {
	cc grpc.ClientConnInterface
}

func NewConduitClient(cc grpc.ClientConnInterface) ConduitClient {
	return &conduitClient{cc}
}

func (c *conduitClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Conduit_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Conduit_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Conduit_GetCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UpdateUser(ctx context.Context, in *UserReply_User, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Conduit_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, Conduit_GetProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) FollowUser(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, Conduit_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UnfollowUser(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, Conduit_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error) {
	out := new(ArticlesReply)
	err := c.cc.Invoke(ctx, Conduit_ListArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) FeedArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticlesReply, error) {
	out := new(ArticlesReply)
	err := c.cc.Invoke(ctx, Conduit_FeedArticles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, Conduit_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) CreateArticle(ctx context.Context, in *ArticleReply_Article, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, Conduit_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UpdateArticle(ctx context.Context, in *ArticleReply_Article, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, Conduit_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Conduit_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*CommentReply, error) {
	out := new(CommentReply)
	err := c.cc.Invoke(ctx, Conduit_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*CommentsReply, error) {
	out := new(CommentsReply)
	err := c.cc.Invoke(ctx, Conduit_GetComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Conduit_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) FavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, Conduit_FavoriteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) UnfavoriteArticle(ctx context.Context, in *ArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, Conduit_UnfavoriteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conduitClient) ListTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsReply, error) {
	out := new(TagsReply)
	err := c.cc.Invoke(ctx, Conduit_ListTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConduitServer is the server API for Conduit service.
// All implementations must embed UnimplementedConduitServer
// for forward compatibility
type ConduitServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*UserReply, error)
	Register(context.Context, *RegisterRequest) (*UserReply, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*UserReply, error)
	UpdateUser(context.Context, *UserReply_User) (*UserReply, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	FollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	UnfollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	ListArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error)
	FeedArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error)
	GetArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	CreateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error)
	UpdateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error)
	DeleteArticle(context.Context, *ArticleRequest) (*emptypb.Empty, error)
	AddComment(context.Context, *AddCommentRequest) (*CommentReply, error)
	GetComments(context.Context, *GetCommentsRequest) (*CommentsReply, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	FavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	UnfavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	ListTags(context.Context, *emptypb.Empty) (*TagsReply, error)
	mustEmbedUnimplementedConduitServer()
}

// UnimplementedConduitServer must be embedded to have forward compatible implementations.
type UnimplementedConduitServer struct {
}

func (UnimplementedConduitServer) Authenticate(context.Context, *AuthenticateRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedConduitServer) Register(context.Context, *RegisterRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConduitServer) GetCurrentUser(context.Context, *emptypb.Empty) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedConduitServer) UpdateUser(context.Context, *UserReply_User) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedConduitServer) GetProfile(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedConduitServer) FollowUser(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedConduitServer) UnfollowUser(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedConduitServer) ListArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedConduitServer) FeedArticles(context.Context, *ListArticlesRequest) (*ArticlesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedArticles not implemented")
}
func (UnimplementedConduitServer) GetArticle(context.Context, *ArticleRequest) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedConduitServer) CreateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedConduitServer) UpdateArticle(context.Context, *ArticleReply_Article) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedConduitServer) DeleteArticle(context.Context, *ArticleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedConduitServer) AddComment(context.Context, *AddCommentRequest) (*CommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedConduitServer) GetComments(context.Context, *GetCommentsRequest) (*CommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedConduitServer) DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedConduitServer) FavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteArticle not implemented")
}
func (UnimplementedConduitServer) UnfavoriteArticle(context.Context, *ArticleRequest) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteArticle not implemented")
}
func (UnimplementedConduitServer) ListTags(context.Context, *emptypb.Empty) (*TagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedConduitServer) mustEmbedUnimplementedConduitServer() {}

// UnsafeConduitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConduitServer will
// result in compilation errors.
type UnsafeConduitServer interface {
	mustEmbedUnimplementedConduitServer()
}

func RegisterConduitServer(s grpc.ServiceRegistrar, srv ConduitServer) {
	s.RegisterService(&Conduit_ServiceDesc, srv)
}

func _Conduit_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReply_User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UpdateUser(ctx, req.(*UserReply_User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).FollowUser(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UnfollowUser(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_FeedArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).FeedArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_FeedArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).FeedArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetArticle(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReply_Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).CreateArticle(ctx, req.(*ArticleReply_Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReply_Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UpdateArticle(ctx, req.(*ArticleReply_Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).DeleteArticle(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_FavoriteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).FavoriteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_FavoriteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).FavoriteArticle(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_UnfavoriteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).UnfavoriteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_UnfavoriteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).UnfavoriteArticle(ctx, req.(*ArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conduit_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConduitServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conduit_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConduitServer).ListTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Conduit_ServiceDesc is the grpc.ServiceDesc for Conduit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conduit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conduit.v1.Conduit",
	HandlerType: (*ConduitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Conduit_Authenticate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Conduit_Register_Handler,
		},
		{
			MethodName: "getCurrentUser",
			Handler:    _Conduit_GetCurrentUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _Conduit_UpdateUser_Handler,
		},
		{
			MethodName: "getProfile",
			Handler:    _Conduit_GetProfile_Handler,
		},
		{
			MethodName: "followUser",
			Handler:    _Conduit_FollowUser_Handler,
		},
		{
			MethodName: "unfollowUser",
			Handler:    _Conduit_UnfollowUser_Handler,
		},
		{
			MethodName: "listArticles",
			Handler:    _Conduit_ListArticles_Handler,
		},
		{
			MethodName: "feedArticles",
			Handler:    _Conduit_FeedArticles_Handler,
		},
		{
			MethodName: "getArticle",
			Handler:    _Conduit_GetArticle_Handler,
		},
		{
			MethodName: "createArticle",
			Handler:    _Conduit_CreateArticle_Handler,
		},
		{
			MethodName: "updateArticle",
			Handler:    _Conduit_UpdateArticle_Handler,
		},
		{
			MethodName: "deleteArticle",
			Handler:    _Conduit_DeleteArticle_Handler,
		},
		{
			MethodName: "addComment",
			Handler:    _Conduit_AddComment_Handler,
		},
		{
			MethodName: "getComments",
			Handler:    _Conduit_GetComments_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _Conduit_DeleteComment_Handler,
		},
		{
			MethodName: "favoriteArticle",
			Handler:    _Conduit_FavoriteArticle_Handler,
		},
		{
			MethodName: "unfavoriteArticle",
			Handler:    _Conduit_UnfavoriteArticle_Handler,
		},
		{
			MethodName: "listTags",
			Handler:    _Conduit_ListTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conduit/v1/conduit.proto",
}
